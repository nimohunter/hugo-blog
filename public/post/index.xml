<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on nimodai-blog</title>
    <link>https://nimodai.xyz/post/</link>
    <description>Recent content in Posts on nimodai-blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 30 Mar 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://nimodai.xyz/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Talk-About-Go-Routine</title>
      <link>https://nimodai.xyz/post/2021-03-30-talk-about-go-routine/</link>
      <pubDate>Tue, 30 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://nimodai.xyz/post/2021-03-30-talk-about-go-routine/</guid>
      <description>goroutine 资料和内容很多，这里不用进行说明和讲解，只要知道go语言的核心在于 communicate by channel , rather than by share memory 就好了。这里记录遇到的一些小坑。
1. panic影响主线程 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( &amp;#34;fmt&amp;#34; &amp;#34;sync&amp;#34; ) func main() { fmt.Println(&amp;#34;[main] routine start..&amp;#34;) wg := sync.WaitGroup{} wg.Add(1) go func() { panicExample() wg.Done() }() wg.Wait() fmt.Println(&amp;#34;[main] routine stop..&amp;#34;) } func panicExample() { arr := make([]int, 0, 3) fmt.</description>
    </item>
    
    <item>
      <title>Understand-Kubernetes</title>
      <link>https://nimodai.xyz/post/2019-08-12-understand-kubernetes/</link>
      <pubDate>Mon, 12 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>https://nimodai.xyz/post/2019-08-12-understand-kubernetes/</guid>
      <description>这是一篇不那么正经的Kubernetes讲解，并不对实际的API进行讲解，只描述其Kubernetes的基本特点和核心功能。
 Kubernetes 是在CNCF (Cloud Native Computing Foundation) 牵头，由社区完善的大规模容器编排处理平台。根据近几年的发展，基本上成为了容器编排平台的标准地位。从大多数软件开发者的角度来说，Kubernetes解决的事代码 push commit 之后的所有事项，从 CI/CD，到发布运维，到升级回滚。
Kubernetes 特点 个人认为 Kubernetes 主要设计特点在于对用户十分友好的声明式API以及实现声明式API的控制器，其次是容器编排能力与足够开放的CRI, CSI, CNI。
声明式API以及控制器 声明式API相对应的是命令式API。Kubernetes做到了所声明即所得，意味着用户利用yaml文件声明的某种API的描述，kubernetes能够时刻保证现状和用户声明的一致，如果发生变化，kubernetes将试图进行一系列自动的操作来维持一致性。所以Kubernetes的高层API是相对抽象的，更多的从业务出发，更多的使用户的操作更直观和简单。
为了维持这种声明式的结果就需要不断地检查自身的现状，这就是调协(Reconcile)，就是控制器主要功能，用来保证声明的结果实时是正确的。
而基于Kubernetes的开发基本就围绕在 Custom Resource Define 与 Custom Controller. 建设更高层的API，满足业务需求。
容器编排 容器编排是Kubernetes的核心能力，将不同的Pod放在合适的Node上，并在需要的时候进行腾挪。这里正在进行重构，目前的 Default Scheduler 可能并不能满足复杂的业务发展和需求。
默认调度器有两个控制循环。一个是Informer Path，用来监听Etcd中Pod，Node，Service等与调度相关的API的变化，并将待调度的事件放入Priority Queue中。另一个是 Scheduling Path。从Priority Queue取出相关事件，例如 新建Pod。经过Predicate来检查过滤Node，然后在符合条件的Node中进行Priority操作进行打分，分数最高的Node接收该Pod。
CNI(Container Network Interface) Kubernetes默认所有的容器都是三层联通的。但是在实际中，如果不做操作，宿主机的容器只能和其他的宿主机通信，无法跟其他宿主机的容器进行通信。
Kubernetes并不解决跨容器通信问题，只是通过CNI插件来完成这个问题。最常见的有两种实现方式：
 Calico 将容器的ip通过BGP来维护一个路由表，让所有跨主机通信知道某个容器的ip应该送往哪个宿主机。二层不通的情况下使用IPIP封装。 Flannel + VxLan 通过二次封包和隧道进行通信，同样也需要容器ip和宿主机ip关系。   其中容器ip和宿主机ip关系存储在Etcd中，Etcd另一个存储就是Pod Node 等API的数据。
 CRI(Container Runtime Interface) Kubernetes 最初的底层容器使用的是docker，但是因为CoreOs公司的rkt容器等历史原因,Kubernetes将对容器的操作抽象出来，不再对docker进行直接操作。保证下层无论是哪种容器化技术，kubernetes都能够通过CRI进行操作。
例如 kata Container 与 gVisor等。</description>
    </item>
    
    <item>
      <title>Talk-about-Violate-and-CAS</title>
      <link>https://nimodai.xyz/post/2018-06-01-talk-about-violate-and-cas/</link>
      <pubDate>Fri, 01 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://nimodai.xyz/post/2018-06-01-talk-about-violate-and-cas/</guid>
      <description>Violate 与 CAS 原子性探究 关于原子性的问题，很多的Blog进行了分析和解释，这里只是想更明确的解释清楚。
Violate 保证所有的线程可见性，但是不保证原子性。所以只有set和get场景使用violate是非常合适的，能够保证修改能够快速的被所有的线程所识别。但是不适合于getAndOperate。
而violate之所以可以达到线程可见性是因为内存屏障的存在，violate修饰的对象会在读操作之前加内存屏障，在写操作之后加内存屏障。而内存屏障的存在就是打破CPU的指令重排序。我们知道CPU会利用流水进行指令的重排序，来实现保证输出结果不发生改变的情况下进行性能优化，而内存屏障则是打破这种重排序，内存屏障保证对在内存屏障之前指令必须全部执行完，才能执行内存屏障后的指令。所以在对一个violate对象修改之后，所有的之后的操作必须等待这个violate对象修改完之后才能进行操作。
内存屏障的第二个作用是告诉其他CPU这块数据已经是脏数据了，可以强制刷新其他CPU的对于这个Violate对象的缓存。一个写屏障会把这个屏障前写入的数据强制刷新到Cache，这样任何试图读取该数据的线程将得到最新值。
但是，Violate依然不具备原子性，比如对一个violate 的Integer进行+1操作，jvm指令为：
mov 0xc(%r10),%r8d ; Load inc %r8d ; Increment mov %r8d,0xc(%r10) ; Store lock addl $0x0,(%rsp) ; StoreLoad Barrier 其中Load到StoreLoad Barrier 并不是原子的，中间任何一部分都可能被打断，比如在Increment阶段，被打断，数值被修改，之后再继续执行写回就出错了。
CAS CAS操作来自于Java的unsafe包，而CAS的原子性也是由unsafe包提供的native方法提供的。CAS是所有原子变量的原子性的基础，原因是因为最终的native的操作会演化为一条CPU指令cmpxchg ，而不是多条CPU指令，所以这一条指令是不会被多线程调度机制打断的，而且对于大多数CPU都是支持的，而少量不支持的CPU会自动加lock进行保证这条指令被原子执行。
关注一下AtomicReference 的compareAndSet 方法，这是一个标准的原子操作：
1 2 3 4 5 6 7 8 9 10 11  /** * Atomically sets the value to the given updated value * if the current value {@code ==} the expected value.</description>
    </item>
    
    <item>
      <title>Real-time-pose-estimation-with-aruco</title>
      <link>https://nimodai.xyz/post/2017-06-06-real-time-pose-estimation-with-aruco/</link>
      <pubDate>Tue, 06 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://nimodai.xyz/post/2017-06-06-real-time-pose-estimation-with-aruco/</guid>
      <description>Project in github
 This projects base on Real Time pose estimation of a textured object and here is Code
if you cannot run this offical code, maybe you can use this, My base Real time estimate prject, which just modify a little to make the offical code can build and run successful. (maybe the offical code is old and cannot run&amp;hellip;)
Request:
 Opencv3 with opencv_contrib(this extra-package include aruco) Qt Creator   As the name - &amp;ldquo;Real time pose estimation with aruco&amp;rdquo;, I use the Opecv3 method SovlvePnp to Solve this problem, you can see the final result at TODO</description>
    </item>
    
    <item>
      <title>Camera-Calibration-Use-ChArucoBoard</title>
      <link>https://nimodai.xyz/post/2017-06-01-camera-calibration-use-charucoboard/</link>
      <pubDate>Thu, 01 Jun 2017 00:00:00 +0000</pubDate>
      
      <guid>https://nimodai.xyz/post/2017-06-01-camera-calibration-use-charucoboard/</guid>
      <description>The camera, which last use, imaging effect is not very good. So bought a new one, Which support 720p video with 30FPS and more, use this opportunity, talk about use chArucoBoard to calibrate the camera.
References:
 Calibration with ArUco and ChArUco
 1. Generate ChArucoBoard From the reference, can get Source code from here
Because with Qt, the Qt Pro file is:
QT += core QT -= gui CONFIG += c++11 TARGET = new_camera_Calibration CONFIG += console CONFIG -= app_bundle INCLUDEPATH += .</description>
    </item>
    
    <item>
      <title>build clean DNS service</title>
      <link>https://nimodai.xyz/post/2017-04-28-build-clean-dns-service/</link>
      <pubDate>Fri, 28 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://nimodai.xyz/post/2017-04-28-build-clean-dns-service/</guid>
      <description>As we know, every visit to google.com, the browser have to ask DNS server to get DNS infomation about google.com, but for some well-known reason, especially in China mainland, you will get a fake infomation. More seriouly, the ISP(Internet Service Provider)such as China Unicom or China Mobie, dirty the DNS, release ad in DNS infomarion.
So, we need a clean DNS service. unfortunately, the Google Public DNS : 8.8.8.8 , it&amp;rsquo;s performance in China mainaland is unstable, but we have another method.</description>
    </item>
    
    <item>
      <title>Unity3d Java Protobuf</title>
      <link>https://nimodai.xyz/post/2017-04-14-unity-java-protobuf-3.0/</link>
      <pubDate>Fri, 14 Apr 2017 00:00:00 +0000</pubDate>
      
      <guid>https://nimodai.xyz/post/2017-04-14-unity-java-protobuf-3.0/</guid>
      <description>Referece  protobuf_for_unity Google Protobuf   Unity Thanks for GongFaxin, You can download his Code protobuf_for_unity, and Run in Unity 5.3, you can see a lot of Protobuf source code.
Protobuf Download the tools in Protocol Buffers v3.0.0 Download link
Then, follow the Google Tutorial.
protoc -I=$SRC_DIR --java_out=$DST_DIR $SRC_DIR/addressbook.proto protoc -I=$SRC_DIR --csharp_out=$DST_DIR $SRC_DIR/addressbook.proto Then you can get the Java code or C# code.
Java you will need the Jar: protobuf-java-3.</description>
    </item>
    
    <item>
      <title>SolvePnP in 5 Methods</title>
      <link>https://nimodai.xyz/post/2017-03-21-solvepnp-5-methods-in-opencv3/</link>
      <pubDate>Tue, 21 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>https://nimodai.xyz/post/2017-03-21-solvepnp-5-methods-in-opencv3/</guid>
      <description>Before Begin SolvePnP , Finds an object pose from 3D-2D point correspondences., which is the method that rebuild 3D position from 2D picture.
We DO NOT Care about the how to use SolvePnP, we try to understand the inner meaning of SolvePnP, and the 5 methods.
SolvePnP Methods and Paper table:    SolvePnP Methods Reference Paper year      SOLVEPNP_ITERATIVE Original based on Levenberg-Marquardt optimization     SOLVEPNP_EPNP EPnP: Efficient Perspective-n-Point Camera Pose Estimation 2008    SOLVEPNP_P3P Complete Solution Classification for the Perspective-Three-Point Problem 2003    SOLVEPNP_DLS A Direct Least-Squares (DLS) Method for PnP 2011    SOLVEPNP_UPNP Exhaustive Linearization for Robust Camera Pose and Focal Length Estimation 2013     Methods for solving a PnP problem:</description>
    </item>
    
    <item>
      <title>Install OpenCv3 in Debain</title>
      <link>https://nimodai.xyz/post/2017-02-28-install-opencv3-qt-in-debian/</link>
      <pubDate>Tue, 28 Feb 2017 00:00:00 +0000</pubDate>
      
      <guid>https://nimodai.xyz/post/2017-02-28-install-opencv3-qt-in-debian/</guid>
      <description>About Opencv, this is a wonderful CV library. But for some reason, the installation isn&amp;rsquo;t kindful for begenner.I try to use Visual Studio, but lots of Opencv DLL files makes me crazy. So I choose Debian platform, and Qt, which i feel more comfortable.
1. Prepare We should install some dependencies.
Ubuntu/Debian: ubuntu sudo apt-get install qt5-default apt-get install libgtk2.0-dev apt-get install pkg-config references: first-example-code-error
CentOS yum install cmake gcc gcc-c++ gtk+-devel gimp-devel gimp-devel-tools gimp-help-browser \ zlib-devel libtiff-devel libjpeg-devel libpng-devel gstreamer-devel \ libavc1394-devel libraw1394-devel libdc1394-devel \ jasper-devel jasper-utils swig python libtool nasm if you don not install these dependecies, maybe you will see this error:</description>
    </item>
    
    <item>
      <title>Welcome to Jekyll!</title>
      <link>https://nimodai.xyz/post/2016-10-21-how-to-build-this-site/</link>
      <pubDate>Fri, 21 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>https://nimodai.xyz/post/2016-10-21-how-to-build-this-site/</guid>
      <description>To my honor, I just set this site, and i&amp;rsquo;ll write down all the things about how to build this web by digitalocean, docker, gogs, jekyll, nginx, namecheap.
Let&amp;rsquo;s start.
Create a VPS First of all, we need a VPS(Virtual Personal Server). I used use Aliyun Service, but for some policy, we have to register our website to the government, otherwise our web site will be block with a Slogan &amp;ldquo;According some layws and rules, Please record your website&amp;rdquo;.</description>
    </item>
    
  </channel>
</rss>
