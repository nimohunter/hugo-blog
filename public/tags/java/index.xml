<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on nimodai-blog</title>
    <link>https://nimodai.xyz/tags/java/</link>
    <description>Recent content in Java on nimodai-blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 01 Jun 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://nimodai.xyz/tags/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Talk-about-Violate-and-CAS</title>
      <link>https://nimodai.xyz/post/2018-06-01-talk-about-violate-and-cas/</link>
      <pubDate>Fri, 01 Jun 2018 00:00:00 +0000</pubDate>
      
      <guid>https://nimodai.xyz/post/2018-06-01-talk-about-violate-and-cas/</guid>
      <description>Violate 与 CAS 原子性探究 关于原子性的问题，很多的Blog进行了分析和解释，这里只是想更明确的解释清楚。
Violate 保证所有的线程可见性，但是不保证原子性。所以只有set和get场景使用violate是非常合适的，能够保证修改能够快速的被所有的线程所识别。但是不适合于getAndOperate。
而violate之所以可以达到线程可见性是因为内存屏障的存在，violate修饰的对象会在读操作之前加内存屏障，在写操作之后加内存屏障。而内存屏障的存在就是打破CPU的指令重排序。我们知道CPU会利用流水进行指令的重排序，来实现保证输出结果不发生改变的情况下进行性能优化，而内存屏障则是打破这种重排序，内存屏障保证对在内存屏障之前指令必须全部执行完，才能执行内存屏障后的指令。所以在对一个violate对象修改之后，所有的之后的操作必须等待这个violate对象修改完之后才能进行操作。
内存屏障的第二个作用是告诉其他CPU这块数据已经是脏数据了，可以强制刷新其他CPU的对于这个Violate对象的缓存。一个写屏障会把这个屏障前写入的数据强制刷新到Cache，这样任何试图读取该数据的线程将得到最新值。
但是，Violate依然不具备原子性，比如对一个violate 的Integer进行+1操作，jvm指令为：
mov 0xc(%r10),%r8d ; Load inc %r8d ; Increment mov %r8d,0xc(%r10) ; Store lock addl $0x0,(%rsp) ; StoreLoad Barrier 其中Load到StoreLoad Barrier 并不是原子的，中间任何一部分都可能被打断，比如在Increment阶段，被打断，数值被修改，之后再继续执行写回就出错了。
CAS CAS操作来自于Java的unsafe包，而CAS的原子性也是由unsafe包提供的native方法提供的。CAS是所有原子变量的原子性的基础，原因是因为最终的native的操作会演化为一条CPU指令cmpxchg ，而不是多条CPU指令，所以这一条指令是不会被多线程调度机制打断的，而且对于大多数CPU都是支持的，而少量不支持的CPU会自动加lock进行保证这条指令被原子执行。
关注一下AtomicReference 的compareAndSet 方法，这是一个标准的原子操作：
1 2 3 4 5 6 7 8 9 10 11  /** * Atomically sets the value to the given updated value * if the current value {@code ==} the expected value.</description>
    </item>
    
  </channel>
</rss>
