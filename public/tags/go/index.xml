<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>go on nimodai-blog</title>
    <link>https://nimodai.xyz/tags/go/</link>
    <description>Recent content in go on nimodai-blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 30 Mar 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://nimodai.xyz/tags/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Talk-About-Go-Routine</title>
      <link>https://nimodai.xyz/post/2021-03-30-talk-about-go-routine/</link>
      <pubDate>Tue, 30 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://nimodai.xyz/post/2021-03-30-talk-about-go-routine/</guid>
      <description>goroutine 资料和内容很多，这里不用进行说明和讲解，只要知道go语言的核心在于 communicate by channel , rather than by share memory 就好了。这里记录遇到的一些小坑。
1. panic影响主线程 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24  package main import ( &amp;#34;fmt&amp;#34; &amp;#34;sync&amp;#34; ) func main() { fmt.Println(&amp;#34;[main] routine start..&amp;#34;) wg := sync.WaitGroup{} wg.Add(1) go func() { panicExample() wg.Done() }() wg.Wait() fmt.Println(&amp;#34;[main] routine stop..&amp;#34;) } func panicExample() { arr := make([]int, 0, 3) fmt.</description>
    </item>
    
  </channel>
</rss>
